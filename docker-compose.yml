version: '3.7'

services:

  nodeexporter:
    image: prom/node-exporter:${NODE_EXPORTER_VERSION}
    container_name: monitoring.nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    ports:
      - "9100:9100"
    networks:
      - monitoring.network
    labels:
      org.label-schema.group: "monitoring"

  client:
    container_name: client.prober
    build: ./prober
    expose:
      - 8082
    depends_on:
      - proxy
    volumes:
      - ./conf.yaml:/opt/prober/conf.yaml
    environment:
      - VIRTUAL_HOST=nginx.test
      - NETWORK_ACCESS=internal
      - VIRTUAL_PORT=8082
    networks:
      monitoring.network:

  proxy:
    container_name: proxy.prober
    build:
      context: ./proxy/src/proxy
    ports:
      - "80:80"
    image: nginx.promtail.test
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./proxy/certs:/etc/nginx/certs
      - ./proxy/vhost.d:/etc/nginx/vhost.d
      - ./proxy/html:/usr/share/nginx/html
    networks:
      monitoring.network:
        aliases:
          - nginx.test
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
        tag: "{{.ImageName}}|{{.Name}}"

  grafana:
    build:
      context: ./grafana
      args:
        - NGINX_GRAFANA_HOST=${NGINX_GRAFANA_HOST}
        - GRAFANA_VERSION=${GRAFANA_VERSION}
    container_name: monitoring.grafana
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - VIRTUAL_HOST=monitoring.grafana
      - NETWORK_ACCESS=internal
      - VIRTUAL_PORT=3000
    restart: unless-stopped
    expose:
      - 3000
    ports:
      - "3000:3000"
    networks:
      - monitoring.network
    labels:
      org.label-schema.group: "monitoring"

  alertmanager:
    image: prom/alertmanager:v0.23.0
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - "./alertmanager:/config"
      - alertmanager-data:/data
    command: --config.file=/config/alertmanager.yml --log.level=debug
    networks:
      - monitoring.network
  
  grafana-agent:
    image: grafana/agent:latest
    volumes:
      - ./config/grafana-agent.yml:/etc/grafana-agent/grafana-agent.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: --config.file=/etc/grafana-agent/grafana-agent.yaml
    ports:
      - "12345:12345"
    restart: always
    networks:
      - monitoring.network
    
  mimir:
    image: grafana/mimir:latest
    volumes:
      - ./config/mimir.yml:/etc/mimir/mimir.yaml
    command: --config.file=/etc/mimir/mimir.yaml
    ports:
      - "9009:9009"
    restart: always
    networks:
      - monitoring.network
  loki:
    container_name: monitoring.loki
    image: grafana/loki:${LOKI_VERSION}
    expose:
      - 3100
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yml:/etc/loki-config.yml
      - loki-data:/tmp/loki/
    command: -config.file=/etc/loki-config.yml
    restart: unless-stopped
    networks:
      - monitoring.network
    labels:
      org.label-schema.group: "monitoring"
  cadvisor:
    image: gcr.io/google-containers/cadvisor:${CADVISER_VERSION}
    container_name: monitoring.cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    restart: unless-stopped
    command:
      - '--storage_duration=15s'
    expose:
      - 8080
    ports:
      - "8080:8080"
    networks:
      - monitoring.network
    labels:
      org.label-schema.group: "monitoring"

networks:
  monitoring.network:
    ipam:
      driver: default

volumes:
  prometheus-data: {}
  grafana-data: {}
  loki-data: {}
  promtail-data: {}
  alertmanager-data: {}